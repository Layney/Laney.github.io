<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wanglei的博客</title>
  
  
  <link href="https://wangleihi.github.io/atom.xml" rel="self"/>
  
  <link href="https://wangleihi.github.io/"/>
  <updated>2022-05-13T08:29:40.898Z</updated>
  <id>https://wangleihi.github.io/</id>
  
  <author>
    <name>wanglei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS15下判断是否安装某个app不生效问题</title>
    <link href="https://wangleihi.github.io/2022/05/13/iOS15%E4%B8%8B%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%9F%90%E4%B8%AAapp%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>https://wangleihi.github.io/2022/05/13/iOS15%E4%B8%8B%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%9F%90%E4%B8%AAapp%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/</id>
    <published>2022-05-13T07:21:22.000Z</published>
    <updated>2022-05-13T08:29:40.898Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道判断是否安装某个app的方法是：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">UIApplication</span> sharedApplication] canOpenURL:[<span class="built_in">NSURL</span> URLWithString:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%@://&quot;</span>, xx]]]</span><br><span class="line"><span class="comment">// xx是目标app的scheme</span></span><br><span class="line"><span class="comment">// 返回true，说明目标app已安装</span></span><br></pre></td></tr></table></figure><p>在iOS9+下，需要在<code>info.plist</code>里面配置<code>LSApplicationQueriesSchemes</code>目标app的scheme，比如配置微信、qq等app的scheme：</p><p><img src="/iOS15%E4%B8%8B%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%9F%90%E4%B8%AAapp%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/Untitled.png" alt="Untitled"></p><p>ok，等我配置好后满怀期待的验证后发现iOS15以下系统是没问题的，iOS15下这个判断不生效</p><p><img src="/iOS15%E4%B8%8B%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%9F%90%E4%B8%AAapp%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/Untitled%201.png" alt="Untitled"></p><p>后来历经千辛万苦（1小时）才发现，**<code>在iOS 15系统上，使用Xcode 13编译出的App，LSApplicationQueriesSchemes的数量会限制为50个</code>，**超过50个之后配置的scheme<code>代码1</code>  返回的都是false。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们都知道判断是否安装某个app的方法是：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>flutter中图文混排</title>
    <link href="https://wangleihi.github.io/2021/08/14/flutter%E4%B8%AD%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/"/>
    <id>https://wangleihi.github.io/2021/08/14/flutter%E4%B8%AD%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/</id>
    <published>2021-08-14T13:49:22.000Z</published>
    <updated>2021-08-14T14:40:02.913Z</updated>
    
    <content type="html"><![CDATA[<p>图文混排在移动端的UI中是很常见的，那么在flutter中比如这种UI是如何实现的呢：</p><img src="/images/flutter_图文混排.png" width=50% height=50% align=center/><p>图中可以看出这个不仅仅是图文混排，而是自定义view和文字的混排，这种场景在原生端比如ios端就想到放两个控件一个自定义<code>view</code>和<code>UILabel</code>控件，然后后根据第一个<code>view</code>的宽度设置<code>label</code>的首行缩进长度来实现这种效果，实现起来并不优雅，那么这种在flutter中有个非常方便的实现<code>RichText</code>组件：</p><img src="/images/flutter_richtext.png"/><p>是不是感觉实现起来很优雅很easy~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;图文混排在移动端的UI中是很常见的，那么在flutter中比如这种UI是如何实现的呢：&lt;/p&gt;
&lt;img src=&quot;/images/flutter_图文混排.png&quot; width=50% height=50% align=center/&gt;

&lt;p&gt;图中可以看出这个不仅仅是图</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用Swift语言时，如何使用热修复机制</title>
    <link href="https://wangleihi.github.io/2021/01/03/%E4%BD%BF%E7%94%A8Swift%E8%AF%AD%E8%A8%80%E6%97%B6%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%83%AD%E4%BF%AE%E5%A4%8D%E6%9C%BA%E5%88%B6/"/>
    <id>https://wangleihi.github.io/2021/01/03/%E4%BD%BF%E7%94%A8Swift%E8%AF%AD%E8%A8%80%E6%97%B6%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%83%AD%E4%BF%AE%E5%A4%8D%E6%9C%BA%E5%88%B6/</id>
    <published>2021-01-03T13:04:10.267Z</published>
    <updated>2021-02-09T03:28:59.632Z</updated>
    
    <content type="html"><![CDATA[<p>OC语言是动态语言，所以其可以直接使用<code>Aspects</code>库进行线上版本热修复，但是如果采用Swift语言编码时，由于Swift是静态语言，没有动态转发的特性，所以直接使用<code>Aspects</code>库对其属性或函数进行线上热修就不生效了，肿么办呢？<br>解决方案就是：可以使用<code>@objc</code>关键字修饰属性或函数，他的作用主要是方便将类、方法、属性暴露出给OC文件调用，但是有时热修并不生效（应该是热修时仍然未找到对应的属性或函数，具体原因还未查到，有知道的大佬可以告知下），绝处逢生，既然这条路有问题了，本着开发不屈不挠的精神想着肯定还有其他解决方案，果然发现了另外一个关键字<code>dynamic</code>，使用<code>dynamic</code>关键字修饰属性或函数，使具有动态转发的特性，但是<code>dynamic</code>不能修饰结构体和枚举，用了这个关键字后再也不怕热修不生效啦😜。<br>最后提醒下大家，热修虽好用，也不能滥用喔，还是要尽量保证线上版本质量，不到万不得已不要使用喔</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OC语言是动态语言，所以其可以直接使用&lt;code&gt;Aspects&lt;/code&gt;库进行线上版本热修复，但是如果采用Swift语言编码时，由于Swift是静态语言，没有动态转发的特性，所以直接使用&lt;code&gt;Aspects&lt;/code&gt;库对其属性或函数进行线上热修就不生效了，肿</summary>
      
    
    
    
    
  </entry>
  
</feed>
